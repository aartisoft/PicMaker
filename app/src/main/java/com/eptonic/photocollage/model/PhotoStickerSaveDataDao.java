package com.eptonic.photocollage.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTO_STICKER_SAVE_DATA".
*/
public class PhotoStickerSaveDataDao extends AbstractDao<PhotoStickerSaveData, Void> {

    public static final String TABLENAME = "PHOTO_STICKER_SAVE_DATA";

    /**
     * Properties of entity PhotoStickerSaveData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idx = new Property(0, int.class, "idx", false, "IDX");
        public final static Property Filenamex = new Property(1, String.class, "filenamex", false, "FILENAMEX");
    }


    public PhotoStickerSaveDataDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoStickerSaveDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTO_STICKER_SAVE_DATA\" (" + //
                "\"IDX\" INTEGER NOT NULL ," + // 0: idx
                "\"FILENAMEX\" TEXT);"); // 1: filenamex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTO_STICKER_SAVE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhotoStickerSaveData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIdx());
 
        String filenamex = entity.getFilenamex();
        if (filenamex != null) {
            stmt.bindString(2, filenamex);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhotoStickerSaveData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIdx());
 
        String filenamex = entity.getFilenamex();
        if (filenamex != null) {
            stmt.bindString(2, filenamex);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PhotoStickerSaveData readEntity(Cursor cursor, int offset) {
        PhotoStickerSaveData entity = new PhotoStickerSaveData( //
            cursor.getInt(offset + 0), // idx
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // filenamex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhotoStickerSaveData entity, int offset) {
        entity.setIdx(cursor.getInt(offset + 0));
        entity.setFilenamex(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PhotoStickerSaveData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PhotoStickerSaveData entity) {
        return null;
    }

    @Override
    public boolean hasKey(PhotoStickerSaveData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
