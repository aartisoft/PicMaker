package com.yd.picmaker.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STICKER_SAVE_DATA".
*/
public class StickerSaveDataDao extends AbstractDao<StickerSaveData, Void> {

    public static final String TABLENAME = "STICKER_SAVE_DATA";

    /**
     * Properties of entity StickerSaveData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Filename = new Property(1, String.class, "filename", false, "FILENAME");
    }


    public StickerSaveDataDao(DaoConfig config) {
        super(config);
    }
    
    public StickerSaveDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STICKER_SAVE_DATA\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"FILENAME\" TEXT);"); // 1: filename
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STICKER_SAVE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StickerSaveData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(2, filename);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StickerSaveData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(2, filename);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public StickerSaveData readEntity(Cursor cursor, int offset) {
        StickerSaveData entity = new StickerSaveData( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // filename
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StickerSaveData entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setFilename(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(StickerSaveData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(StickerSaveData entity) {
        return null;
    }

    @Override
    public boolean hasKey(StickerSaveData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
